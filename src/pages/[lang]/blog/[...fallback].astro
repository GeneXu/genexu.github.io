---
import { type CollectionEntry, getCollection } from "astro:content";
import languages, { defaultLanguage } from "../../../i18n/languages";
import { deconstructSlug, getPostsReplacedByTranslatedPost } from "../../../i18n/utils";

type TPath = {
	params: {
		lang: string;
		fallback: string;
	};
	props: CollectionEntry<"blog">;
};

export async function getStaticPaths() {
	// Handle fallbacks to default language for langs without translations
	const fallbackPaths: TPath[] = [];
	const posts = await getCollection("blog");
	// We can enhance this when we have more languages
	const resultPosts = getPostsReplacedByTranslatedPost(posts, defaultLanguage);

	Object.keys(languages).forEach((lang) => {
		resultPosts.forEach((post) => {
			const { lang: slugLang, slugWithoutLang } = deconstructSlug(post.slug);
			if (slugLang === lang) return;

			fallbackPaths.push({
				params: {
					lang,
					fallback: slugWithoutLang,
				},
				props: post,
			});
		});
	});

	return fallbackPaths;
}

type Props = CollectionEntry<"blog">;
const post = Astro.props;
const { Content } = await post.render();
---

<Content />
